# pyproject.toml
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "barodybroject"
version = "0.1.0"
description = "A Django-based parody news generator with AI integration"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "GPL-3.0-or-later" }
authors = [
  { name = "bamr87", email = "bamr87@users.noreply.github.com" }
]
keywords = ["django", "ai", "parody", "news"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
# Dependencies - let pip resolve versions automatically
dependencies = [
  # Web server
  "gunicorn",
  
  # Django framework
  "Django",
  "djangorestframework",
  "django-environ",
  
  # Django CMS Core
  "django-cms",
  "djangocms_admin_style",
  
  # Django CMS Content Plugins
  "djangocms_text_ckeditor",
  "djangocms-link",
  "djangocms-frontend",
  
  # Django CMS Advanced Features
  "djangocms-versioning",
  "djangocms-alias",
  
  # Django CMS Dependencies
  "django-sekizai",
  "django-treebeard",
  "pillow",
  "django-filer",
  "easy-thumbnails",
  
  # Django utilities
  "django-import-export",
  "django-json-widget",
  "django-markdownify",
  "django-filer",
  "django-allauth[mfa,saml,socialaccount,steam]",
  "django-ses",
  
  # MFA dependencies
  "fido2",
  
  # Database
  "psycopg2-binary",
  
  # Data processing
  "jsonref",
  "jsonschema",
  "jsonschema-specifications",
  "Markdown",
  "PyYAML",
  "martor",
  
  # Email
  "aiosmtpd",
  "dkimpy",
  
  # Cloud services
  "azure-monitor-opentelemetry",
  "boto3",
  "pygithub",
  
  # AI
  "openai",
]

[project.urls]
Homepage = "https://github.com/bamr87/barodybroject"
Repository = "https://github.com/bamr87/barodybroject"

[project.optional-dependencies]
dev = [
  # Development tools
  "cruft",
  "pip-tools",
  
  # Testing
  "pytest",
  "pytest-django",
  "pytest-playwright",
  "pytest-cov",
  "coverage[toml]",
  
  # Web testing
  "selenium",
  "beautifulsoup4",
  "requests",
  "axe-playwright-python",
  
  # Code quality
  "black",
  "ruff",
  "pre-commit",
  "mypy",
  "django-stubs",
  
  # Documentation
  "sphinx",
  "sphinx-autodoc-typehints",
  "sphinx-rtd-theme",
  "myst-parser",
]

security = [
  "django-security",
  "django-csp",
  "django-ratelimit",
]

monitoring = [
  "django-debug-toolbar",
  "django-extensions",
  "sentry-sdk[django]",
]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

# Black formatter
[tool.black]
line-length = 88
target-version = ["py39"]

# Ruff linter
[tool.ruff]
line-length = 88
target-version = "py39"
select = ["E", "W", "F", "I", "B", "C4", "UP", "SIM", "DJ"]
ignore = ["E501"]

# Pytest
[tool.pytest.ini_options]
addopts = ["--cov=parodynews", "--cov=barodybroject"]
testpaths = ["tests"]
DJANGO_SETTINGS_MODULE = "barodybroject.settings.test"

# Coverage
[tool.coverage.run]
source = ["src"]
omit = ["*/migrations/*", "*/tests/*", "manage.py", "*/settings/*"]

# MyPy
[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
plugins = ["mypy_django_plugin.main"]