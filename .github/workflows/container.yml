name: Container Build and Registry

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate Docker Compose configurations
  validate-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate development compose
        run: |
          docker compose -f .devcontainer/docker-compose_dev.yml config --quiet
          echo "✓ Development compose file is valid"
      
      - name: Validate production compose  
        run: |
          docker compose config --quiet
          echo "✓ Production compose file is valid"
      
      - name: Test compose services startup
        run: |
          # Create test environment
          cat > .env << EOL
          POSTGRES_USER=test_user
          POSTGRES_DB=test_db
          POSTGRES_PASSWORD=test_password
          DB_HOST=barodydb
          DB_USERNAME=test_user
          DB_NAME=test_db
          DB_PASSWORD=test_password
          DJANGO_SETTINGS_MODULE=barodybroject.settings
          DEBUG=True
          RUNNING_IN_PRODUCTION=False
          PYTHONPATH=/workspace/src
          PYTHONUNBUFFERED=1
          EOL
          
          # Test development services can start
          docker compose -f .devcontainer/docker-compose_dev.yml up -d barodydb
          sleep 10
          
          # Check if database is accessible
          docker compose -f .devcontainer/docker-compose_dev.yml exec -T barodydb pg_isready -U test_user -d test_db
          
          echo "✓ Docker Compose services working correctly"
      
      - name: Cleanup
        if: always()
        run: |
          docker compose -f .devcontainer/docker-compose_dev.yml down -v

  # Build and test containerized services
  build-services:
    name: Build Services
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: validate-compose
    
    strategy:
      matrix:
        service: [python, jekyll]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create environment file
        run: |
          cat > .env << EOL
          POSTGRES_USER=build_user
          POSTGRES_DB=build_db
          POSTGRES_PASSWORD=build_password
          DB_HOST=barodydb
          DB_USERNAME=build_user
          DB_NAME=build_db
          DB_PASSWORD=build_password
          DJANGO_SETTINGS_MODULE=barodybroject.settings
          DEBUG=True
          RUNNING_IN_PRODUCTION=False
          PYTHONPATH=/workspace/src
          PYTHONUNBUFFERED=1
          EOL
      
      - name: Build ${{ matrix.service }} service
        run: |
          docker compose -f .devcontainer/docker-compose_dev.yml build ${{ matrix.service }}
          echo "✓ ${{ matrix.service }} service built successfully"
      
      - name: Test ${{ matrix.service }} service startup
        run: |
          # Start dependencies if needed
          if [ "${{ matrix.service }}" = "python" ]; then
            docker compose -f .devcontainer/docker-compose_dev.yml up -d barodydb
            # Wait for database to be healthy (let Docker's healthcheck handle it)
            timeout 60 bash -c 'until [ "$(docker inspect --format="{{.State.Health.Status}}" $(docker compose -f .devcontainer/docker-compose_dev.yml ps -q barodydb))" = "healthy" ]; do echo "Waiting for database..."; sleep 2; done'
            echo "✓ Database is healthy"
          fi
          
          # Test service can start with appropriate command
          if [ "${{ matrix.service }}" = "python" ]; then
            docker compose -f .devcontainer/docker-compose_dev.yml run --rm ${{ matrix.service }} python --version
          elif [ "${{ matrix.service }}" = "jekyll" ]; then
            docker compose -f .devcontainer/docker-compose_dev.yml run --rm ${{ matrix.service }} jekyll --version
          fi
          
          echo "✓ ${{ matrix.service }} service startup test completed"
      
      - name: Cleanup
        if: always()
        run: |
          docker compose -f .devcontainer/docker-compose_dev.yml down -v

  # Security scanning using Trivy  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-services
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance and resource testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-services
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create environment file
        run: |
          cat > .env << EOL
          POSTGRES_USER=perf_user
          POSTGRES_DB=perf_db
          POSTGRES_PASSWORD=perf_password
          DB_HOST=barodydb
          DB_USERNAME=perf_user
          DB_NAME=perf_db
          DB_PASSWORD=perf_password
          DJANGO_SETTINGS_MODULE=barodybroject.settings
          DEBUG=False
          RUNNING_IN_PRODUCTION=True
          PYTHONPATH=/workspace/src
          PYTHONUNBUFFERED=1
          EOL
      
      - name: Performance test services
        run: |
          # Start all services
          docker compose -f .devcontainer/docker-compose_dev.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Monitor resource usage
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
          
          # Test Django application responsiveness
          timeout 30 bash -c 'until docker compose -f .devcontainer/docker-compose_dev.yml exec -T python python manage.py check; do sleep 2; done'
          
          echo "✓ Performance test completed"
      
      - name: Cleanup
        if: always()
        run: |
          docker compose -f .devcontainer/docker-compose_dev.yml down -v

  # Final container summary
  container-summary:
    name: Container Summary
    runs-on: ubuntu-latest
    needs: [validate-compose, build-services, security-scan, performance-test]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Validate Compose: ${{ needs.validate-compose.result }}"
          echo "Build Services: ${{ needs.build-services.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Performance Test: ${{ needs.performance-test.result }}"
          
          if [[ "${{ needs.validate-compose.result }}" == "failure" || 
                "${{ needs.build-services.result }}" == "failure" ]]; then
            echo "❌ Container Pipeline Failed"
            exit 1
          else
            echo "✅ Container Pipeline Passed"
          fi
